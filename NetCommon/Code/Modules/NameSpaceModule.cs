using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using NetCommon.Buffers;

namespace NetCommon.Code.Modules;

[StructLayout(LayoutKind.Auto)]
public readonly ref struct NameSpaceModule
{
   private readonly ByReferenceStack<CodeTextWriter> _writerReference;

   public ref CodeTextWriter Writer
   {
      [MethodImpl(MethodImplOptions.AggressiveInlining)]
      get => ref _writerReference.AsRef();
   }
   
   public NameSpaceModule(ref CodeTextWriter writer)
   {
      _writerReference = ByReferenceStack<CodeTextWriter>.Create(ref writer);
   }
   
   /// <summary>
   /// Immediately writes the #nullable enable line to the code.
   /// </summary>
   /// <param name="extraLine">Whether to add an extra line after(default true)</param>
   public void EnableNullable(bool extraLine = true)
   {
      ref var writer = ref Writer;
      
      writer.WriteLine("#nullable enable");
      writer.WriteLineIf(extraLine);
   }

   /// <summary>
   /// Immediately writes an auto-generated comment to the code.
   /// </summary>
   /// <param name="extraLine">Whether to add an extra line after(default true)</param>
   public void AutoGeneratedComment(bool extraLine = true)
   {
      ref var writer = ref Writer;

      writer.WriteLine("// <auto-generated>");
      writer.WriteLineIf(extraLine);
   }
   
   /// <summary>
   /// Immediately writes a standard using statement to the code.
   /// </summary>
   /// <param name="nameSpace">Namespace name like 'System.Collections'</param>
   public void Using(scoped ReadOnlySpan<char> nameSpace)
   {
      ArgumentOutOfRangeException.ThrowIfGreaterThan(nameSpace.Length, 1024, nameof(nameSpace));
      
      Span<char> buffer = stackalloc char[nameSpace.Length + 7]; // 7 using + ;
      Span<char> usingBuffer = ['u', 's', 'i', 'n', 'g', ' '];
      var completeBuffer = buffer;
      
      usingBuffer.CopyTo(buffer);
      buffer = buffer[6..];
      
      nameSpace.CopyTo(buffer);
      buffer[^1] = ';';
      
      Writer.WriteLine(completeBuffer);
   }

   /// <summary>
   /// Immediately writes a file scoped namespace line to the code.
   /// </summary>
   /// <param name="nameSpace">The given NameSpace like 'My.NameSpace.Code'</param>
   public void Set(scoped ReadOnlySpan<char> nameSpace)
   {
      ArgumentOutOfRangeException.ThrowIfGreaterThan(nameSpace.Length, 1024, nameof(nameSpace));
      
      Span<char> buffer = stackalloc char[nameSpace.Length + 11]; // namespace + ;
      Span<char> fixedBuffer = ['n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', ' '];
      var completeBuffer = buffer;
      
      fixedBuffer.CopyTo(buffer);
      buffer = buffer[10..];
      
      nameSpace.CopyTo(buffer);
      buffer[^1] = ';';
      
      Writer.WriteLine(completeBuffer);
   }
}